// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.29.3
// source: pdf_transfer.proto

package pdf_processor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request message containing the PDF data.
type ProcessPdfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename   string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                       // Original filename for context/logging
	PdfContent []byte `protobuf:"bytes,2,opt,name=pdf_content,json=pdfContent,proto3" json:"pdf_content,omitempty"` // The raw bytes of the PDF file.
}

func (x *ProcessPdfRequest) Reset() {
	*x = ProcessPdfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdf_transfer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessPdfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessPdfRequest) ProtoMessage() {}

func (x *ProcessPdfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_transfer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessPdfRequest.ProtoReflect.Descriptor instead.
func (*ProcessPdfRequest) Descriptor() ([]byte, []int) {
	return file_pdf_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessPdfRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ProcessPdfRequest) GetPdfContent() []byte {
	if x != nil {
		return x.PdfContent
	}
	return nil
}

// Fully structured response message
type StructuredProcessPdfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalFilename     string `protobuf:"bytes,1,opt,name=original_filename,json=originalFilename,proto3" json:"original_filename,omitempty"`
	SaveAttempted        bool   `protobuf:"varint,2,opt,name=save_attempted,json=saveAttempted,proto3" json:"save_attempted,omitempty"`                       // Was a save operation tried?
	SavedSuccessfully    bool   `protobuf:"varint,3,opt,name=saved_successfully,json=savedSuccessfully,proto3" json:"saved_successfully,omitempty"`           // Did the save succeed?
	SavedFilenameServer  string `protobuf:"bytes,4,opt,name=saved_filename_server,json=savedFilenameServer,proto3" json:"saved_filename_server,omitempty"`    // Filename used on the server side (after sanitization)
	ProcessingStatus     string `protobuf:"bytes,5,opt,name=processing_status,json=processingStatus,proto3" json:"processing_status,omitempty"`               // Status string (e.g., "simulated_complete", "error")
	SimulatedTextSummary string `protobuf:"bytes,6,opt,name=simulated_text_summary,json=simulatedTextSummary,proto3" json:"simulated_text_summary,omitempty"` // Placeholder for actual processed text/summary
	ErrorInfo            string `protobuf:"bytes,7,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`                                    // Contains error message if something went wrong (e.g., save failed)
}

func (x *StructuredProcessPdfResponse) Reset() {
	*x = StructuredProcessPdfResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdf_transfer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredProcessPdfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredProcessPdfResponse) ProtoMessage() {}

func (x *StructuredProcessPdfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_transfer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredProcessPdfResponse.ProtoReflect.Descriptor instead.
func (*StructuredProcessPdfResponse) Descriptor() ([]byte, []int) {
	return file_pdf_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *StructuredProcessPdfResponse) GetOriginalFilename() string {
	if x != nil {
		return x.OriginalFilename
	}
	return ""
}

func (x *StructuredProcessPdfResponse) GetSaveAttempted() bool {
	if x != nil {
		return x.SaveAttempted
	}
	return false
}

func (x *StructuredProcessPdfResponse) GetSavedSuccessfully() bool {
	if x != nil {
		return x.SavedSuccessfully
	}
	return false
}

func (x *StructuredProcessPdfResponse) GetSavedFilenameServer() string {
	if x != nil {
		return x.SavedFilenameServer
	}
	return ""
}

func (x *StructuredProcessPdfResponse) GetProcessingStatus() string {
	if x != nil {
		return x.ProcessingStatus
	}
	return ""
}

func (x *StructuredProcessPdfResponse) GetSimulatedTextSummary() string {
	if x != nil {
		return x.SimulatedTextSummary
	}
	return ""
}

func (x *StructuredProcessPdfResponse) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

var File_pdf_transfer_proto protoreflect.FileDescriptor

var file_pdf_transfer_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x64, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x70, 0x64, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x22, 0x50, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x64,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x64, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x64, 0x66, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xd7, 0x02, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x64, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x61, 0x76,
	0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x61, 0x76, 0x65, 0x64, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x61, 0x76, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x32,
	0x74, 0x0a, 0x13, 0x50, 0x64, 0x66, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x64, 0x66, 0x12, 0x20, 0x2e, 0x70, 0x64, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x64, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x64, 0x66, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x64, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x64, 0x66, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pdf_transfer_proto_rawDescOnce sync.Once
	file_pdf_transfer_proto_rawDescData = file_pdf_transfer_proto_rawDesc
)

func file_pdf_transfer_proto_rawDescGZIP() []byte {
	file_pdf_transfer_proto_rawDescOnce.Do(func() {
		file_pdf_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_pdf_transfer_proto_rawDescData)
	})
	return file_pdf_transfer_proto_rawDescData
}

var file_pdf_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pdf_transfer_proto_goTypes = []interface{}{
	(*ProcessPdfRequest)(nil),            // 0: pdf_processor.ProcessPdfRequest
	(*StructuredProcessPdfResponse)(nil), // 1: pdf_processor.StructuredProcessPdfResponse
}
var file_pdf_transfer_proto_depIdxs = []int32{
	0, // 0: pdf_processor.PdfProcessorService.ProcessPdf:input_type -> pdf_processor.ProcessPdfRequest
	1, // 1: pdf_processor.PdfProcessorService.ProcessPdf:output_type -> pdf_processor.StructuredProcessPdfResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pdf_transfer_proto_init() }
func file_pdf_transfer_proto_init() {
	if File_pdf_transfer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pdf_transfer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessPdfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdf_transfer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructuredProcessPdfResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pdf_transfer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pdf_transfer_proto_goTypes,
		DependencyIndexes: file_pdf_transfer_proto_depIdxs,
		MessageInfos:      file_pdf_transfer_proto_msgTypes,
	}.Build()
	File_pdf_transfer_proto = out.File
	file_pdf_transfer_proto_rawDesc = nil
	file_pdf_transfer_proto_goTypes = nil
	file_pdf_transfer_proto_depIdxs = nil
}
