// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: pdf_transfer.proto

package pdf_processor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PdfProcessorServiceClient is the client API for PdfProcessorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PdfProcessorServiceClient interface {
	// Processes a given PDF file and returns structured results.
	ProcessPdf(ctx context.Context, in *ProcessPdfRequest, opts ...grpc.CallOption) (*StructuredProcessPdfResponse, error)
}

type pdfProcessorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPdfProcessorServiceClient(cc grpc.ClientConnInterface) PdfProcessorServiceClient {
	return &pdfProcessorServiceClient{cc}
}

func (c *pdfProcessorServiceClient) ProcessPdf(ctx context.Context, in *ProcessPdfRequest, opts ...grpc.CallOption) (*StructuredProcessPdfResponse, error) {
	out := new(StructuredProcessPdfResponse)
	err := c.cc.Invoke(ctx, "/pdf_processor.PdfProcessorService/ProcessPdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PdfProcessorServiceServer is the server API for PdfProcessorService service.
// All implementations must embed UnimplementedPdfProcessorServiceServer
// for forward compatibility
type PdfProcessorServiceServer interface {
	// Processes a given PDF file and returns structured results.
	ProcessPdf(context.Context, *ProcessPdfRequest) (*StructuredProcessPdfResponse, error)
	mustEmbedUnimplementedPdfProcessorServiceServer()
}

// UnimplementedPdfProcessorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPdfProcessorServiceServer struct {
}

func (UnimplementedPdfProcessorServiceServer) ProcessPdf(context.Context, *ProcessPdfRequest) (*StructuredProcessPdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPdf not implemented")
}
func (UnimplementedPdfProcessorServiceServer) mustEmbedUnimplementedPdfProcessorServiceServer() {}

// UnsafePdfProcessorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PdfProcessorServiceServer will
// result in compilation errors.
type UnsafePdfProcessorServiceServer interface {
	mustEmbedUnimplementedPdfProcessorServiceServer()
}

func RegisterPdfProcessorServiceServer(s grpc.ServiceRegistrar, srv PdfProcessorServiceServer) {
	s.RegisterService(&PdfProcessorService_ServiceDesc, srv)
}

func _PdfProcessorService_ProcessPdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfProcessorServiceServer).ProcessPdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdf_processor.PdfProcessorService/ProcessPdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfProcessorServiceServer).ProcessPdf(ctx, req.(*ProcessPdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PdfProcessorService_ServiceDesc is the grpc.ServiceDesc for PdfProcessorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PdfProcessorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdf_processor.PdfProcessorService",
	HandlerType: (*PdfProcessorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessPdf",
			Handler:    _PdfProcessorService_ProcessPdf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pdf_transfer.proto",
}
